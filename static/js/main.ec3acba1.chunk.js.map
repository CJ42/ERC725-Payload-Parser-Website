{"version":3,"sources":["hooks/getWeb3.js","components/Header/Header.js","Decode.js","components/EncodedPayload/EncodedPayload.js","components/EncoderSetData/EncoderSetData.js","components/EncoderExecute/EncoderExecute.js","components/EncoderTransferOwnership/EncoderTransferOwnership.js","Encode.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","className","AppBar","position","Toolbar","Typography","variant","Link","color","target","href","SELECTORS","SETDATA","EXECUTE","TRANSFEROWNERSHIP","ShowDecoder","selector","payload","result","eth","abi","decodeParameters","Grid","container","item","xs","md","List","dense","ListItem","map","key","style","fontSize","value","error","DecoderError","web3Error","message","DecodeSetData","TextField","label","defaultValue","fullWidth","InputProps","readOnly","DecodeExecute","Alert","severity","DecodeTransferOwnership","Decode","props","defaultChips","setData","execute","transferOwnership","useState","setSelector","setPayload","chipsBackground","setChipsBackground","abiError","setABIError","TextareaAutosize","width","minRows","maxRows","placeholder","onChange","event","input","slice","Object","values","includes","newChipsBackground","showFunction","Box","sx","direction","justifyContent","alignItems","Chip","icon","length","EncodedPayload","copiedText","setCopiedText","component","paddingLeft","paddingRight","text","onCopy","Tooltip","placement","fontFamily","fontWeight","lineHeight","display","margin","padding","textAlign","border","borderRadius","data-clipboard-text","type","wordWrap","EncoderSetData","account","id","rows","setRows","encodedPayload","setEncodedPayload","height","marginBottom","columns","field","headerName","editable","onCellEditCommit","element","newRows","rowIndex","fieldEdited","Button","onClick","newId","push","size","startIcon","keys","row","methods","encodeABI","EncoderExecute","operation","setOperation","recipient","setRecipient","amount","setAmount","data","InputLabel","Select","labelId","MenuItem","marginTop","weiAmount","utils","toWei","EncoderTransferOwnership","newOwner","setNewOwner","ERC725Account","require","Encode","erc725Account","Contract","React","action","setAction","FormControl","FormLabel","RadioGroup","aria-label","name","FormControlLabel","control","Radio","TabPanel","children","index","other","role","hidden","aria-labelledby","p","a11yProps","backgroundColor","palette","background","paper","minHeight","fab","bottom","right","fabGreen","common","white","green","FloatingActionButtonZoom","useTheme","setValue","Tabs","newValue","indicatorColor","textColor","Tab","axis","onChangeIndex","dir","App","state","storageValue","accounts","componentDidMount","getAccounts","setState","alert","this","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec3acba1.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\" className={classes.title}>\n            ERC725 Payload Parser\n          </Typography>\n          <Link\n            color=\"inherit\"\n            target=\"_blank\"\n            href=\"https://github.com/CJ42/ERC725-Payload-Parser-Website\"\n          >\n            Github\n          </Link>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\nimport LaunchIcon from \"@material-ui/icons/Launch\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\n\n// Layout\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\n\n// Components\nimport Alert from \"@material-ui/lab/Alert\";\nimport Chip from \"@material-ui/core/Chip\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst SELECTORS = {\n  SETDATA: \"14a6e293\",\n  EXECUTE: \"44c028fe\",\n  TRANSFEROWNERSHIP: \"f2fde38b\",\n};\n\nfunction ShowDecoder({ selector, payload, web3 }) {\n  if (selector === SELECTORS.SETDATA) {\n    return DecodeSetData(payload, web3);\n  }\n\n  if (selector === SELECTORS.EXECUTE) {\n    return DecodeExecute(payload, web3);\n  }\n\n  if (selector === SELECTORS.TRANSFEROWNERSHIP) {\n    return DecodeTransferOwnership(payload, web3);\n  }\n\n  return \"could not decode payload\";\n}\n\nexport default function Decode(props) {\n  const defaultChips = {\n    setData: \"default\",\n    execute: \"default\",\n    transferOwnership: \"default\",\n  };\n\n  const [selector, setSelector] = useState(\"\");\n  const [payload, setPayload] = useState(\"\");\n  const [chipsBackground, setChipsBackground] = useState(defaultChips);\n  const [abiError, setABIError] = useState({ error: false, message: \"\" });\n\n  const showFunction = (selector) => {\n    // always start with the default chips\n    let newChipsBackground = defaultChips;\n\n    // find which selector it is + edit the background in the property\n    switch (selector) {\n      case SELECTORS.SETDATA:\n        newChipsBackground.setData = \"primary\";\n        break;\n      case SELECTORS.EXECUTE:\n        newChipsBackground.execute = \"primary\";\n        break;\n      case SELECTORS.TRANSFEROWNERSHIP:\n        newChipsBackground.transferOwnership = \"primary\";\n        break;\n      default:\n        break;\n    }\n    // update the state\n    setChipsBackground(newChipsBackground);\n  };\n\n  return (\n    <div>\n      <TextareaAutosize\n        width={900}\n        minRows={8}\n        maxRows={8}\n        placeholder=\"Paste your abi here...\"\n        onChange={(event) => {\n          let input = event.target.value;\n\n          // check that the input start with 0x\n          if (input.slice(0, 2) !== \"0x\") {\n            setABIError({\n              error: true,\n              message: \"Invalid payload. Missing `0x` prefix for hexadecimal\",\n            });\n            return;\n          }\n\n          // get the first 4 bytes\n          let selector = input.slice(2, 10);\n          let payload = input.slice(10);\n\n          setSelector(selector);\n          setPayload(payload);\n\n          if (!Object.values(SELECTORS).includes(selector)) {\n            setABIError({\n              error: true,\n              message: \"Unrecognised ERC725 selector\",\n            });\n            return;\n          } else {\n            setABIError({ error: false, message: \"\" });\n          }\n\n          showFunction(selector);\n        }}\n      />\n      {abiError.error ? <Alert severity=\"error\">{abiError.message}</Alert> : \"\"}\n      <Box sx={{ flexGrow: 1 }}>\n        <Grid container spacing={2}>\n          <Grid item xs={3}>\n            <Grid\n              container\n              direction=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              spacing=\"3\"\n            >\n              <Chip\n                icon={<PlaylistAddIcon />}\n                label=\"Set Data\"\n                color={chipsBackground.setData}\n              />\n              <Chip\n                icon={<LaunchIcon />}\n                label=\"Execute\"\n                color={chipsBackground.execute}\n              />\n              <Chip\n                icon={<AccountCircleIcon />}\n                label=\"Transfer Ownership\"\n                color={chipsBackground.transferOwnership}\n              />\n            </Grid>\n          </Grid>\n          <Grid item xs={9}>\n            {!abiError.error && payload.length > 0 ? (\n              <ShowDecoder\n                selector={selector}\n                payload={payload}\n                web3={props.web3}\n              />\n            ) : (\n              \"\"\n            )}\n          </Grid>\n        </Grid>\n      </Box>\n    </div>\n  );\n}\n\nfunction DecodeSetData(payload, web3) {\n  try {\n    let result = web3.eth.abi.decodeParameters(\n      [\"bytes32[]\", \"bytes[]\"],\n      payload\n    );\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <div>\n            <List dense={true}>\n              <ListItem>\n                <b>Keys</b>\n              </ListItem>\n              {result[0].map((key) => (\n                <ListItem style={{ fontSize: \"10px\" }}>{key}</ListItem>\n              ))}\n            </List>\n          </div>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <div>\n            <List dense={true}>\n              <ListItem>\n                <b>Values</b>\n              </ListItem>\n              {result[1].map((value) => (\n                <ListItem style={{ fontSize: \"10px\" }}>{value}</ListItem>\n              ))}\n            </List>\n          </div>\n        </Grid>\n      </Grid>\n    );\n  } catch (error) {\n    return (\n      <Grid item md={12}>\n        <DecoderError web3Error={error.message} />\n      </Grid>\n    );\n  }\n}\n\nfunction DecodeExecute(payload, web3) {\n  try {\n    let result = web3.eth.abi.decodeParameters(\n      [\"uint256\", \"address\", \"uint256\", \"bytes\"],\n      payload\n    );\n    return (\n      <Grid container>\n        <Grid item md={12}>\n          <TextField\n            label=\"Operation\"\n            defaultValue=\"...\"\n            value={result[0]}\n            fullWidth\n            InputProps={{ readOnly: true }}\n          />\n        </Grid>\n        <Grid item md={12}>\n          <TextField\n            label=\"Recipient\"\n            defaultValue=\"0xcafe...\"\n            value={result[1]}\n            fullWidth\n            InputProps={{ readOnly: true }}\n          />\n        </Grid>\n        <Grid item md={12}>\n          <TextField\n            label=\"Amount\"\n            defaultValue=\"x LYX\"\n            value={result[2]}\n            fullWidth\n            InputProps={{ readOnly: true }}\n          />\n        </Grid>\n        <Grid item md={12}>\n          <TextField\n            label=\"Data\"\n            defaultValue=\"0x...\"\n            value={result[3]}\n            fullWidth\n            InputProps={{ readOnly: true }}\n          />\n        </Grid>\n      </Grid>\n    );\n  } catch (error) {\n    return (\n      <Grid item md={12}>\n        <DecoderError web3Error={error.message} />\n      </Grid>\n    );\n  }\n}\n\nfunction DecodeTransferOwnership(payload, web3) {\n  try {\n    let result = web3.eth.abi.decodeParameters([\"address\"], payload);\n    return (\n      <Grid item md={12}>\n        <Alert severity=\"warning\">\n          <b>Warning! </b>\n          This payload transfer ownership to {result[0]}.<br /> Be cautious!\n        </Alert>\n        <TextField\n          label=\"new owner\"\n          defaultValue=\"0x...\"\n          value={result[0]}\n          fullWidth\n          InputProps={{ readOnly: true }}\n        />\n      </Grid>\n    );\n  } catch (error) {\n    return (\n      <Grid item md={12}>\n        <DecoderError web3Error={error.message} />\n      </Grid>\n    );\n  }\n}\n\nfunction DecoderError({ web3Error }) {\n  return (\n    <Alert severity=\"error\">\n      <b>Web3 ABI Decoder Error! </b>\n      <br />\n      {web3Error}\n    </Alert>\n  );\n}\n","import React, { useState } from \"react\";\n\n// Layout\nimport Grid from \"@material-ui/core/Grid\";\n\n// Components\nimport Box from \"@material-ui/core/Box\";\nimport { Typography } from \"@material-ui/core\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\n// icons\nimport FileCopy from \"@material-ui/icons/FileCopy\";\n\nexport default function EncodedPayload({ payload }) {\n    const [copiedText, setCopiedText] = useState();\n    return (\n      <>\n        <Grid item component={Box} paddingLeft=\"15px\" paddingRight=\"15px\">\n          <CopyToClipboard text={payload} onCopy={() => setCopiedText(payload)}>\n            <Tooltip\n              title={\n                copiedText === payload ? \"This was Copied!\" : \"Copy To Clipboard\"\n              }\n              placement=\"top\"\n            >\n              <Box\n                component=\"button\"\n                fontFamily=\"inherit\"\n                fontSize=\"16px\"\n                fontWeight=\"400\"\n                lineHeight=\"1.25\"\n                display=\"inline-block\"\n                width=\"80%\"\n                margin=\".5rem 0\"\n                padding=\"24px\"\n                textAlign=\"left\"\n                border=\"0\"\n                borderRadius=\"4px\"\n                data-clipboard-text=\"album-2\"\n                type=\"button\"\n              >\n                <div>\n                  <FileCopy />\n                  <Typography style={{ wordWrap: \"break-word\" }}>\n                    {payload}\n                  </Typography>\n                </div>\n              </Box>\n            </Tooltip>\n          </CopyToClipboard>\n        </Grid>\n      </>\n    );\n  }","import React, { useState } from \"react\";\n\n// Layout\nimport Grid from \"@material-ui/core/Grid\";\n\n// Elements\nimport Button from \"@material-ui/core/Button\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n\n// icons\nimport SaveIcon from \"@material-ui/icons/Save\";\n\n// Components\nimport EncodedPayload from \"../EncodedPayload/EncodedPayload\"\n\nexport default function EncoderSetData({ web3, account }) {\n    const columns = [\n      { field: \"id\" },\n      { field: \"key\", headerName: \"Key\", width: 500, editable: true },\n      { field: \"value\", headerName: \"Value\", width: 500, editable: true },\n    ];\n  \n    const [rows, setRows] = useState([\n      { id: 1, key: \"<enter key 1>\", value: \"<enter your value 1\" },\n    ]);\n  \n    const [encodedPayload, setEncodedPayload] = useState(\"\");\n  \n    return (\n      <>\n        <div style={{ height: 300, width: \"100%\", marginBottom: 10 }}>\n          <DataGrid\n            rows={rows}\n            columns={columns}\n            onCellEditCommit={(element) => {\n              let newRows = [...rows];\n              let rowIndex = element.id - 1;\n              let fieldEdited = element.field;\n              newRows[rowIndex][fieldEdited] = element.value;\n  \n              setRows(newRows);\n            }}\n          />\n        </div>\n  \n        <Grid container justifyContent=\"center\" spacing=\"5\">\n          <Grid key=\"0\" item>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => {\n                let newRows = [...rows];\n                console.log(newRows);\n                let newId = newRows.length + 1;\n                newRows.push({\n                  id: newId,\n                  key: \"enter your key\",\n                  value: \"enter your value\",\n                });\n                setRows(newRows);\n              }}\n            >\n              Add Row\n            </Button>\n          </Grid>\n          <Grid key=\"1\" item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              startIcon={<SaveIcon />}\n              onClick={() => {\n                let keys = rows.map((row) => row.key);\n                let values = rows.map((row) => row.value);\n  \n                setEncodedPayload(\n                  account.methods.setData(keys, values).encodeABI()\n                );\n              }}\n            >\n              Encode ABI\n            </Button>\n          </Grid>\n        </Grid>\n        <div style={{ height: 300, width: \"100%\", marginBottom: 10 }}>\n          <EncodedPayload payload={encodedPayload} />\n        </div>\n      </>\n    );\n  }","import React, { useState } from \"react\";\n\n// Layout\nimport Grid from \"@material-ui/core/Grid\";\n\n// Elements\nimport Button from \"@material-ui/core/Button\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport TextField from \"@material-ui/core/TextField\";\n\n// Icons\nimport SaveIcon from \"@material-ui/icons/Save\";\n\n// Components\nimport EncodedPayload from \"../EncodedPayload/EncodedPayload\"\n\nexport default function EncoderExecute({ web3, account }) {\n    const [operation, setOperation] = useState(\"\");\n    const [recipient, setRecipient] = useState(\"\");\n    const [amount, setAmount] = useState(\"\");\n    const [data, setData] = useState(\"\");\n  \n    const [encodedPayload, setEncodedPayload] = useState(\"\");\n  \n    return (\n      <>\n        <Grid container justifyContent=\"center\">\n          <Grid item md={12}>\n            <InputLabel id=\"demo-simple-select-label\">Operation</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={operation}\n              onChange={(event) => setOperation(event.target.value)}\n            >\n              <MenuItem value={\"0\"}>CALL</MenuItem>\n              <MenuItem value={\"1\"}>CREATE</MenuItem>\n              <MenuItem value={\"2\"}>CREATE2</MenuItem>\n              <MenuItem value={\"3\"}>STATICCALL</MenuItem>\n              <MenuItem value={\"4\"}>DELEGATECALL</MenuItem>\n            </Select>\n          </Grid>\n          <Grid item md={12}>\n            <TextField\n              label=\"Recipient\"\n              defaultValue=\"0xcafe...\"\n              value={recipient}\n              fullWidth\n              onChange={(event) => {\n                let input = event.target.value;\n                setRecipient(input);\n              }}\n            />\n          </Grid>\n          <Grid item md={12}>\n            <TextField\n              label=\"Amount\"\n              defaultValue=\"x LYX\"\n              value={amount}\n              fullWidth\n              onChange={(event) => {\n                let input = event.target.value;\n                setAmount(input);\n              }}\n            />\n          </Grid>\n          <Grid item md={12}>\n            <TextField\n              label=\"Data\"\n              defaultValue=\"0x...\"\n              value={data}\n              fullWidth\n              onChange={(event) => {\n                let input = event.target.value;\n                setData(input);\n              }}\n            />\n          </Grid>\n        </Grid>\n        <div\n          style={{ height: 300, width: \"100%\", marginBottom: 10, marginTop: 10 }}\n        >\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            startIcon={<SaveIcon />}\n            onClick={() => {\n              let weiAmount = web3.utils.toWei(amount);\n              setEncodedPayload(\n                account.methods\n                  .execute(operation, recipient, weiAmount, data)\n                  .encodeABI()\n              );\n            }}\n          >\n            Encode ABI\n          </Button>\n          <EncodedPayload payload={encodedPayload} />\n        </div>\n      </>\n    );\n  }","import React, { useState } from \"react\";\n\n// Elements\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\n// Icons\nimport SaveIcon from \"@material-ui/icons/Save\";\n\n// Components\nimport EncodedPayload from \"../EncodedPayload/EncodedPayload\"\n\nexport default function EncoderTransferOwnership({ web3, account }) {\n    const [newOwner, setNewOwner] = useState(\"\");\n    \n    const [encodedPayload, setEncodedPayload] = useState(\"\");\n    \n    return (\n        <>\n            <TextField\n                label=\"new owner\"\n                defaultValue=\"0x...\"\n                value={newOwner}\n                fullWidth\n                onChange={(event) => setNewOwner(event.target.value)}\n            />\n            <div\n                style={{ height: 300, width: \"100%\", marginBottom: 10, marginTop: 10 }}\n            >\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                    startIcon={<SaveIcon />}\n                    onClick={() => {\n                        setEncodedPayload(\n                            account.methods\n                            .transferOwnership(newOwner)\n                            .encodeABI()\n                        );\n                    }}\n                >\n                    Encode ABI\n                </Button>\n                <EncodedPayload payload={encodedPayload} />\n            </div>\n        </>\n    );\n  }","import React from \"react\";\n\n// Layout\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\n\n// Elements\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\n\n// Components\nimport EncoderSetData from \"./components/EncoderSetData/EncoderSetData\"\nimport EncoderExecute from \"./components/EncoderExecute/EncoderExecute\"\nimport EncoderTransferOwnership from \"./components/EncoderTransferOwnership/EncoderTransferOwnership\"\n\nconst ACTION_SETDATA = \"setData\";\nconst ACTION_EXECUTE = \"execute\";\nconst ACTION_TRANSFEROWNERSHIP = \"transferOwnership\";\n\nconst ERC725Account = require(\"./abis/ERC725Account.json\");\n\nexport default function Encode(props) {\n  const erc725Account = new props.web3.eth.Contract(ERC725Account.abi);\n  const [action, setAction] = React.useState(\"\");\n\n  const handleChange = (event) => {\n    setAction(event.target.value);\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid container spacing={2}>\n        <Grid item xs={3}>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Select action</FormLabel>\n            <RadioGroup\n              aria-label=\"action\"\n              name=\"action\"\n              value={action}\n              onChange={handleChange}\n            >\n              <FormControlLabel\n                value={ACTION_SETDATA}\n                control={<Radio />}\n                label=\"Set Data\"\n              />\n              <FormControlLabel\n                value={ACTION_EXECUTE}\n                control={<Radio />}\n                label=\"Execute\"\n              />\n              <FormControlLabel\n                value={ACTION_TRANSFEROWNERSHIP}\n                control={<Radio />}\n                label=\"Transfer Ownership\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n        <Grid item xs={9}>\n          {action === ACTION_SETDATA && (\n            <EncoderSetData web3={props.web3} account={erc725Account} />\n          )}\n          {action === ACTION_EXECUTE && (\n            <EncoderExecute web3={props.web3} account={erc725Account} />\n          )}\n          {action === ACTION_TRANSFEROWNERSHIP && (\n            <EncoderTransferOwnership web3={props.web3} account={erc725Account} />\n          )}\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { green } from \"@material-ui/core/colors\";\nimport Box from \"@material-ui/core/Box\";\n\n// layout\nimport Decode from \"./Decode\";\nimport Encode from \"./Encode\";\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`action-tabpanel-${index}`}\n      aria-labelledby={`action-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={2}>{children}</Box>}\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `action-tab-${index}`,\n    \"aria-controls\": `action-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    width: \"100%\",\n    position: \"relative\",\n    minHeight: 200,\n  },\n  fab: {\n    position: \"absolute\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n  fabGreen: {\n    color: theme.palette.common.white,\n    backgroundColor: green[500],\n    \"&:hover\": {\n      backgroundColor: green[600],\n    },\n  },\n}));\n\nexport default function FloatingActionButtonZoom(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleChangeIndex = (index) => {\n    setValue(index);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          aria-label=\"action tabs example\"\n        >\n          <Tab label=\"Encode\" {...a11yProps(0)} />\n          <Tab label=\"Decode\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews\n        axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n        index={value}\n        onChangeIndex={handleChangeIndex}\n      >\n        <TabPanel value={value} index={0} dir={theme.direction}>\n          <Encode web3={props.web3} />\n        </TabPanel>\n        <TabPanel value={value} index={1} dir={theme.direction}>\n          <Decode web3={props.web3} />\n        </TabPanel>\n      </SwipeableViews>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport getWeb3 from \"./hooks/getWeb3\";\n\nimport \"./App.css\";\n\n// layout\nimport Header from \"./components/Header/Header\"\nimport Body from \"./Body\"\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null /*, contract: null */ };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <Header />\n        <Body web3={this.state.web3} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}